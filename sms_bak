<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Sms extends CI_Controller {

    private $_title = "Sms";
    private $_title_page = '<i class="fa-fw fa fa-envelope"></i> Sms ';
    private $_breadcrumb = "<li><a href='".MANAGER_HOME."'>Home</a></li>";
    private $_active_page = "SMS";
    private $_back = "sms";
    private $_js_view = "sms/";
    private $_view_folder = "sms/";

    protected $_header;
    protected $_footer;
    protected $id = 0;
    protected $no_sms = 0;

    public function __construct() {
        parent::__construct();
    }

    /**
    * Function list sms
    * author : didi
    */
    public function index()
    {
        //set header attribute.
        $this->_header = array(
            "title"         => $this->_title,
            "title_page"    => $this->_title_page . '<span>> List Sms </span>',
            "active_page"   => $this->_active_page,
            "breadcrumb"    => $this->_breadcrumb . '<li>Sms </li>',
        );

        //set footer attribute (additional script and css).
        $this->_footer = array(
            "view_js_nav"  => $this->_js_view.'group_js',
            "script"       => array(
                "assets/js/plugins/datatables/jquery.dataTables.min.js",
                "assets/js/plugins/datatables/dataTables.bootstrap.min.js",
                "assets/js/plugins/datatable-responsive/datatables.responsive.min.js",
            )
        );

        //load the views.
        $this->load->view(MANAGER_HEADER , $this->_header);
        $this->load->view($this->_view_folder . 'index');
        $this->load->view(MANAGER_FOOTER , $this->_footer);
    }

    public function inbox()
    {
        // $datas['data'] = $this->getMessage( 67851470 );
        //set header attribute.
        $this->_header = array(
            "title"         => $this->_title,
            "title_page"    => $this->_title_page . '<span>> Inbox List </span>',
            "active_page"   => $this->_active_page.'-INBOX',
            "breadcrumb"    => $this->_breadcrumb . '<li>inbox </li>',
        );

        //set footer attribute (additional script and css).
        $this->_footer = array(
            "view_js_nav"  => $this->_js_view.'inbox_js',
            "script"       => array(
                "assets/js/plugins/datatables/jquery.dataTables.min.js",
                "assets/js/plugins/datatables/dataTables.bootstrap.min.js",
                "assets/js/plugins/datatable-responsive/datatables.responsive.min.js",
            )
        );

        //load the views.
        $this->load->view(MANAGER_HEADER , $this->_header);
        $this->load->view($this->_view_folder . 'inbox');
        $this->load->view(MANAGER_FOOTER , $this->_footer);
    }

    public function outbox()
    {
        //set header attribute.
        $this->_header = array(
            "title"         => $this->_title,
            "title_page"    => $this->_title_page . '<span>> Oubox List </span>',
            "active_page"   => $this->_active_page.'-OUTBOX',
            "breadcrumb"    => $this->_breadcrumb . '<li>outbox </li>',
        );

        //set footer attribute (additional script and css).
        $this->_footer = array(
            "view_js_nav"  => $this->_js_view.'outbox_js',
            "script"       => array(
                "assets/js/plugins/datatables/jquery.dataTables.min.js",
                "assets/js/plugins/datatables/dataTables.bootstrap.min.js",
                "assets/js/plugins/datatable-responsive/datatables.responsive.min.js",
            )
        );

        //load the views.
        $this->load->view(MANAGER_HEADER , $this->_header);
        $this->load->view($this->_view_folder . 'outbox');
        $this->load->view(MANAGER_FOOTER , $this->_footer);
    }

    public function sent()
    {
        //set header attribute.
        $this->_header = array(
            "title"         => $this->_title,
            "title_page"    => $this->_title_page . '<span>> Sent Sms List </span>',
            "active_page"   => $this->_active_page .'-SENT',
            "breadcrumb"    => $this->_breadcrumb . '<li>Sent List </li>',
        );

        //set footer attribute (additional script and css).
        $this->_footer = array(
            "view_js_nav"  => $this->_js_view.'sent_js',
            "script"       => array(
                "assets/js/plugins/datatables/jquery.dataTables.min.js",
                "assets/js/plugins/datatables/dataTables.bootstrap.min.js",
                "assets/js/plugins/datatable-responsive/datatables.responsive.min.js",
            )
        );

        //load the views.
        $this->load->view(MANAGER_HEADER , $this->_header);
        $this->load->view($this->_view_folder . 'sent');
        $this->load->view(MANAGER_FOOTER , $this->_footer);
    }

    /**
     * Create an sms
     */
    public function create_personal () {
        $this->load->library('Smsgateway');
        $this->_breadcrumb .= '<li><a href="'.site_url('sms').'">Sms</a></li>';
        //load the models
        $this->load->model("Dynamic_model");

        //prepare set datas
        $params = array(
            "status" => -1,
            "row_array" => false
        );

        $datas = $this->Dynamic_model->set_model(
            "tbl_sms_template", "tst","template_id"
        )->get_all_data($params)['datas'];

        $data = array(
            'datas' => $datas
        );

        //prepare header title.
        $header = array(
            "title"         => $this->_title,
            "title_page"    => $this->_title_page . '<span>> Create Sms Personal</span>',
            "title_msg"     => "Form Create",
            "active_page"   => $this->_active_page.'-CREATE-PERSONAL',
            "breadcrumb"    => $this->_breadcrumb . '<li>Create Sms Personal</li>',
            "back"          => $this->_back,
            "css" => array(
                "assets/css/select2.min.css",
            )
        );

        $footer = array(
            "view_js_nav"  => $this->_js_view.'create_js_nav_personal',
            "script"       => array(
                "assets/js/plugins/select2.full.min.js",
            )
        );

        //load the view.
        $this->load->view(MANAGER_HEADER, $header);
        $this->load->view($this->_view_folder . 'create_personal', $data);
        $this->load->view(MANAGER_FOOTER, $footer);
    }

    /**
     * Create an sms
     */
    public function replay ($id = null) {
        $this->_breadcrumb .= '<li><a href="'.site_url('sms').'">Replay Sms</a></li>';
        //load the models
        $this->load->model("Dynamic_model");

        //prepare set datas
        $param = array(
            "status"    => -1,
            "row_array" => true,
            "conditions" => array("ID" => $id)
        );

        $data_inbox = $this->Dynamic_model->set_model(
            "inbox", "in","ID"
        )->get_all_data($param)['datas'];

        //prepare set datas
        $params = array(
            "status" => -1,
            "row_array" => false
        );

        $datas = $this->Dynamic_model->set_model(
            "tbl_sms_template", "tst","template_id"
        )->get_all_data($params)['datas'];

        $data = array(
            'datas' => $datas,
            "inbox" => $data_inbox
        );


        //prepare header title.
        $header = array(
            "title"         => $this->_title,
            "title_page"    => $this->_title_page . '<span>> Replay Sms</span>',
            "title_msg"     => "Form Replay",
            "active_page"   => $this->_active_page."-CREATE-PERSONAL",
            "breadcrumb"    => $this->_breadcrumb . '<li>Replay Sms</li>',
            "back"          => $this->_back,
            "css" => array(
                "assets/css/select2.min.css",
            )
        );

        $footer = array(
            "view_js_nav"  => $this->_js_view.'replay_js',
            "script"       => array(
                "assets/js/plugins/select2.full.min.js",
            )
        );

        //load the view.
        $this->load->view(MANAGER_HEADER, $header);
        $this->load->view($this->_view_folder . 'replay', $data);
        $this->load->view(MANAGER_FOOTER, $footer);
    }

    /**
     * Create an sms broadcast to group
     */
    public function create_group () {
        $this->_breadcrumb .= '<li><a href="'.site_url('sms').'">Sms</a></li>';

        //prepare header title.
        $header = array(
            "title"         => $this->_title,
            "title_page"    => $this->_title_page . '<span>> Create Sms Broadcast</span>',
            "title_msg"     => "Form Create",
            "active_page"   => $this->_active_page,
            "breadcrumb"    => $this->_breadcrumb . '<li>Create Sms Broadcast</li>',
            "back"          => $this->_back,
        );
        $this->load->model("Dynamic_model");

        $data = $this->Dynamic_model->set_model("tbl_sms_group","tsg","group_id")->get_all_data(array(
            "select" => "tnd.UserMobilePhone, tsg.*",
            "left_joined" => array("mst_data_user tnd" => array(
                "tnd.UserGroupId" => "tsg.group_id"
            )),
            "conditions" => array(),
            "row_array"  => false,
            "status"     => -1,
            "debug"      => false,
            "group_by"   => "tsg.group_id"
        ))['datas'];

        //prepare set datas
        $params = array(
            "status" => -1,
            "row_array" => false
        );

        $datas = $this->Dynamic_model->set_model(
            "tbl_sms_template", "tst","template_id"
        )->get_all_data($params)['datas'];

        $data = array(
            'datas' => $data,
            'data'  => $datas
        );

        $footer = array(
            "view_js_nav"  => $this->_js_view.'create_js_nav',
        );

        //load the view.
        $this->load->view(MANAGER_HEADER, $header);
        $this->load->view($this->_view_folder . 'create_broadcast', $data);
        $this->load->view(MANAGER_FOOTER, $footer);
    }
    /** create sms by checked data**/
    public function create_sms_checkbox()
    {
        //var_dump(1);exit();
        $this->id = $this->input->post('id_sms');
        $this->id = substr($this->id, 1);

        $this->_breadcrumb .= '<li><a href="'.site_url('sms').'">SMS</a></li>';

        $this->load->model("Dynamic_model");

        //prepare set datas
        $param = array(
            "status" => -1,
            "row_array" => false
        );

        $template = $this->Dynamic_model->set_model(
            "tbl_sms_template", "tst","template_id"
        )->get_all_data($param)['datas'];

        $data = $this->_get_data();
        //convert to 1 dimensional
        $data = array_map('current', $data);
        //array to string
        $data = implode(",", $data);
        // pr($data);exit;
        $datas = array(
            "datas"     => $data,
            "template"  => $template
        );

        //prepare header title.
        $header = array(
            "title"         => $this->_title,
            "title_page"    => $this->_title_page . '<span>> Create SMS BY Checked</span>',
            "title_msg"     => "Form Create",
            "active_page"   => "create",
            "breadcrumb"    => $this->_breadcrumb . '<li>Create SMS BY Checked</li>',
            "back"          => $this->_back,
        );

        $footer = array(
            "view_js_nav"  => $this->_js_view.'create_js_check_nav',
        );

        //load the view.
        $this->load->view(MANAGER_HEADER, $header);
        $this->load->view($this->_view_folder . 'create_sms_checkbox', $datas);
        $this->load->view(MANAGER_FOOTER, $footer);
    }

    /**
     * Edit an
     */
    // public function edit ($sms_id = null) {
    //     $this->_breadcrumb .= '<li><a href="'.site_url('sms').'">Sms Group</a></li>';

    //     //load the model.
    //     $this->load->model('Sms_model');
    //     $data['item'] = null;

    //     //validate ID and check for data.
    //     if ( $sms_id === null || !is_numeric($sms_id) ) {
    //         show_404();
    //     }

    //     $params = array("row_array" => true,"conditions" => array("sms_id" => $sms_id));
    //     //get the data.
    //     $data['item'] = $this->Group_model->get_all_data($params)['datas'];

    //     //if no data found with that ID, throw error.
    //     if (empty($data['item'])) {
    //         show_404();
    //     }

    //     //prepare header title.
    //     $header = array(
    //         "title"         => $this->_title,
    //         "title_page"    => $this->_title_page . '<span>> Edit Sms Group</span>',
    //         "active_page"   => $this->_active_page,
    //         "breadcrumb"    => $this->_breadcrumb . '<li>Edit Sms Group</li>',
    //         "back"          => $this->_back,
    //     );

    //     $footer = array(
    //         // "script" => $this->_js_path . "create.js",
    //     );

    //     //load the view.
    //     $this->load->view(MANAGER_HEADER, $header);
    //     $this->load->view($this->_view_folder . 'create', $data);
    //     $this->load->view(MANAGER_FOOTER, $footer);
    // }

    /**
     * view an
     */
    public function view_inbox ($sms_id = null) {
        $this->_breadcrumb .= '<li><a href="'.site_url('sms').'">View SMS Inbox</a></li>';

        //load the model.
        $this->load->model('Dynamic_model');

        $params = array(
            "row_array" => true,
            "conditions" => array("in.ID" => $sms_id),
            "status"     => -1,
            "debug"      => false
        );
        //get the data.
        $data['datas'] = $this->Dynamic_model->set_model("inbox","in","ID")->get_all_data($params)['datas'];
        // pr($data['item']);exit;
        //update is read
        $update = $this->Dynamic_model->set_model("inbox","in","ID")->update(
            array(
                "IsRead" => 1),
            array(
                "ID" => $sms_id)
        );
        //prepare header title.
        $header = array(
            "title"         => $this->_title,
            "title_page"    => $this->_title_page . '<span>> View Sms Inbox</span>',
            "active_page"   => $this->_active_page,
            "breadcrumb"    => $this->_breadcrumb . '<li>View Sms Inbox</li>',
            "back"          => $this->_back."/inbox",
        );

        $footer = array();

        //load the view.
        $this->load->view(MANAGER_HEADER, $header);
        $this->load->view($this->_view_folder . 'view-inbox', $data);
        $this->load->view(MANAGER_FOOTER, $footer);
    }

    public function process_form() {
        //must ajax and must post.

        //load form validation lib.
        $this->load->library('form_validation');

        //load the model.
        $this->load->model('Dynamic_model');

        //initial.
        $message['is_error'] = true;
        $message['error_msg'] = "";
        $message['redirect_to'] = "";

        $this->form_validation->set_rules('isi',"Message","required");

        //sanitize input (id is primary key, if from edit, it has value).
        $id            = $this->input->post('id');
        $no_hp         = $this->input->post('nomor');
        $no_hps        = $this->input->post('nomors');
        $type          = $this->input->post('type');
        $template_id   = $this->input->post('template_id');
        $msg           = $this->input->post('isi');
        $creator       = $this->session->userdata('name');

        $fix_no        = ($no_hp) ? $no_hp : $no_hps;

        if( $this->form_validation->run() == FALSE) {
            $message['error_msg'] = validation_errors();
        } else {
            //validation success, prepare array to DB.
            $this->db->trans_begin();
            $_save_data = array(
                'DestinationNumber'   => $fix_no,
                'TextDecoded'         => $msg,
                'CreatorID'           => $creator,
                'type_id'             => $type,
                'template_id'         => $template_id
            );
            if ( $_save_data ) {
                $sent_sms = $this->Dynamic_model->set_model("outbox","ot","ID")->insert($_save_data);
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    $message['is_error'] = true;
                    $message['error_msg'] = "Internal server error";
                } else {
                    $this->db->trans_commit();
                    $message['is_error'] = false;
                    //success.
                    $message['notif_title'] = "Good!";
                    $message['notif_message'] = "SMS IS SEND.";

                    //on insert, not redirected.
                    $message['redirect_to'] = site_url('sms/outbox');
                }
            } else {
                $message['error_msg'] = "Internal server error";
            }
        }
        //encoding and returning.
        $this->output->set_content_type('application/json');
        echo json_encode($message);
        exit;
    }

    /*
    * function proses send sms checkbox
    * json data
    */
    public function process_form_checkbox() {
        //load form validation lib.
        $this->load->library('form_validation');

        //load the model.
        $this->load->model('Dynamic_model');

        $this->form_validation->set_rules("message","Message","required");
        //initial.
        $message['is_error'] = true;
        $message['error_msg'] = "";
        $message['redirect_to'] = "";

        $id            = $this->input->post('id');
        $type          = $this->input->post('type');
        $no_sms        = $this->input->post('no_sms');
        $template_id   = $this->input->post('template_id');
        $msg           = $this->input->post('message');
        $creator       = $this->session->userdata('name');
        $id_sms = implode(",", $no_sms);
        // pr($id_sms);exit;
        if( $this->form_validation->run() == FALSE ) {
            $message['error_msg'] = validation_errors();
        } else {
            $this->db->trans_begin();
            $data = $this->Dynamic_model->set_model("mst_data_user","mdu","UserDataId")->get_all_data(array(
                "select" => "UserMobilePhone",
                "conditions" => array("mdu.UserDataId IN (".$id_sms.")" => NULL),
                "debug"     => false
            ))['datas'];
            // pr($data);exit;
            foreach( $data as $key => $val) {
                $_save_data = array(
                    "DestinationNumber" => $val['UserMobilePhone'],
                    "TextDecoded"  => $msg,
                    "CreatorID"    => $creator
                );
            }
            //check post is true
            if ($_save_data) {
                // pr($this->input->post());exit;
                $sent_sms = $this->Dynamic_model->set_model("outbox","ot","ID")->insert($_save_data);

                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    $message['is_error'] = true;
                    $message['error_msg'] = "Internal server error";
                } else {
                    $this->db->trans_commit();
                    $message['is_error'] = false;
                    //success.
                    $message['notif_title'] = "Good!";
                    $message['notif_message'] = "SMS IS SEND.";

                    //on insert, not redirected.
                    $message['redirect_to'] = site_url('sms/outbox');
                }
            } else {
                $message['error_msg'] = "Internal Server Error!!!";
            }
        }
        //encoding and returning.
        $this->output->set_content_type('application/json');
        echo json_encode($message);
        exit;
    }

    /*
    * function send replay sms
    */
    public function process_form_replay(){
        if (!$this->input->is_ajax_request() || $this->input->method(true) != "POST") {
            exit('No direct script access allowed');
        }
        //must ajax and must post.
        //load form validation lib.
        $this->load->library('form_validation');

        //load the model.
        $this->load->model('Dynamic_model');

        $this->form_validation->set_rules('isi',"Message","required");

        //initial.
        $message['is_error'] = true;
        $message['error_msg'] = "";
        $message['redirect_to'] = "";

        //sanitize input (id is primary key, if from edit, it has value).
        $id            = $this->input->post('id');
        $no_hp         = $this->input->post('nomor');
        $template_id   = $this->input->post('template_id');
        $msg           = $this->input->post('isi');
        $creator       = $this->session->userdata("name");

        if( $this->form_validation->run() == FALSE) {
            $message['error_msg'] = validation_errors();
        } else {
            $this->db->trans_begin();
            //validation success, prepare array to DB.
            $_save_data = array(
                'DestinationNumber'   => $no_hp,
                'TextDecoded'         => $msg,
                'CreatorID'           => $creator
            );
            //check post is true
            if ($_save_data) {
                //send
                $sent_sms = $this->Dynamic_model->set_model("outbox","ot","ID")->insert($_save_data);
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    $message['is_error'] = true;
                    $message['error_msg'] = "Internal server error";
                } else {
                    $this->db->trans_commit();
                    $message['is_error'] = false;
                    //success.
                    $message['notif_title'] = "Good!";
                    $message['notif_message'] = "SMS IS SEND.";

                    //on insert, not redirected.
                    $message['redirect_to'] = site_url('sms/outbox');
                }
            } else {
                $message['error_msg'] = "Internal Server Error!!!";
            }
        }
        //encoding and returning.
        $this->output->set_content_type('application/json');
        echo json_encode($message);
        exit;
    }

    /*
    * function process send broadcast to group
    */
    public function process_forms() {

        //load form validation lib.
        $this->load->library('form_validation');

        //load the model.
        $this->load->model('Dynamic_model');
        //server validation
        $this->form_validation->set_rules("message","Message","required");

        //initial.
        $message['is_error'] = true;
        $message['error_msg'] = "";
        $message['redirect_to'] = "";

        $no_hp          = $this->input->post('no');
        $template_id    = $this->input->post('template_id');
        $msg            = $this->input->post('message');
        $group_id       = $this->input->post('group_id');
        $create         = $this->session->userdata('user_id');

        if( $this->form_validation->run() == FALSE ) {
            $message['error_msg'] = validation_errors();
        } else {
            //validation success, prepare array to DB.
            $this->db->trans_begin();

            //get data in group
            $param_get = array(
                "select" => "tnd.UserMobilePhone",
                "joined" => array("mst_data_user tnd" => array("tnd.UserGroupId" => "gg.group_id")),
                "status" => -1,
                "conditions" => array("group_id" => $group_id)
            );

            $grup = $this->Dynamic_model->set_model("tbl_sms_group", "gg", "group_id")->get_all_data($param_get)['datas'];
            // pr($grup);exit();
            foreach ($grup as $key => $val)
            {
                $_save_data = array(
                    "DestinationNumber" => $val['UserMobilePhone'],
                    "TextDecoded"  => $msg,
                    "CreatorID"    => $create,
                    "type_id"      => 3,
                    "template_id"  => $template_id,
                    "OutGroupId"   => $group_id
                );
            }

            if ( $_save_data )
            {
                $result = $this->Dynamic_model->set_model("outbox","ot","ID")->insert($_save_data);
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                    $message['is_error'] = true;
                    $message['error_msg'] = "Internal server error";
                } else {
                    $this->db->trans_commit();
                    $message['is_error'] = false;
                    //success.
                    $message['notif_title'] = "Good!";
                    $message['notif_message'] = "SMS IS SEND.";

                    //on insert, not redirected.
                    $message['redirect_to'] = site_url('sms/outbox');
                }
            } else {
                $message['error_msg'] = "Internal server error";
            }
        }
        //encoding and returning.
        $this->output->set_content_type('application/json');
        echo json_encode($message);
        exit;
    }

    /**
     * Function to get list_all_data
     */
    public function list_all_data_inbox() {
        //must ajax and must get.
        if (!$this->input->is_ajax_request() || $this->input->method(true) != "GET") {
            exit('No direct script access allowed');
        }

        //load model
        $this->load->model('Dynamic_model');

        $sort_col = sanitize_str_input($this->input->get("order")['0']['column'], "numeric");
        $sort_dir = sanitize_str_input($this->input->get("order")['0']['dir']);
        $limit    = sanitize_str_input($this->input->get("length"), "numeric");
        $start    = sanitize_str_input($this->input->get("start"), "numeric");
        $search   = sanitize_str_input($this->input->get("search")['value']);
        $filter   = $this->input->get("filter");

        $select   = array("ID","SenderNumber","TextDecoded","IF(IsRead = 1, 'READ', 'UNREAD') as statusSms");

        $column_sort = $select[$sort_col];

        //initialize.
        $data_filters = array();
        $conditions = array();
        $status = STATUS_ACTIVE;

        if (count ($filter) > 0) {
            foreach ($filter as $key => $value) {
                $value = ($value);
                switch ($key) {
                    case 'id':
                        if ($value != "") {
                            $data_filters['lower(inbox_id)'] = $value;
                        }
                        break;
                    case 'from':
                        if ($value != "") {
                            $data_filters['lower(inbox_sendnumber)'] = $value;
                        }
                        break;
                    default:
                        break;
                }
            }
        }

        //get data
        $datas = $this->Dynamic_model->set_model("inbox","in","ID")->get_all_data(array(
            'select' => $select,
            'order_by' => array($column_sort => $sort_dir),
            'limit' => $limit,
            'start' => $start,
            'conditions' => $conditions,
            'filter' => $data_filters,
            'status' => -1,
            'debug' => false,
            "count_all_first" => true
        ));

        //get total rows
        $total_rows = $datas['total'];

        $output = array(
            "data" => $datas['datas'],
            "draw" => intval($this->input->get("draw")),
            "recordsTotal" => $total_rows,
            "recordsFiltered" => $total_rows,
        );

        //encoding and returning.
        $this->output->set_content_type('application/json');
        echo json_encode($output);
        exit;
    }

    /**
     * Function to get list_all_data admin
     */
    public function list_all_data_sent() {
        //must ajax and must get.
        if (!$this->input->is_ajax_request() || $this->input->method(true) != "GET") {
            exit('No direct script access allowed');
        }

        //load model
        $this->load->model('Dynamic_model');

        $sort_col = sanitize_str_input($this->input->get("order")['0']['column'], "numeric");
        $sort_dir = sanitize_str_input($this->input->get("order")['0']['dir']);
        $limit    = sanitize_str_input($this->input->get("length"), "numeric");
        $start    = sanitize_str_input($this->input->get("start"), "numeric");
        $search   = sanitize_str_input($this->input->get("search")['value']);
        $filter   = $this->input->get("filter");

        $select   = array("ID","DestinationNumber","TextDecoded","Status");

        $column_sort = $select[$sort_col];

        //initialize.
        $data_filters = array();
        $conditions = array();
        $status = STATUS_ACTIVE;

        if (count ($filter) > 0) {
            foreach ($filter as $key => $value) {
                $value = ($value);
                switch ($key) {
                    case 'id':
                        if ($value != "") {
                            $data_filters['lower(inbox_id)'] = $value;
                        }
                        break;
                    case 'from':
                        if ($value != "") {
                            $data_filters['lower(inbox_sendnumber)'] = $value;
                        }
                        break;
                    default:
                        break;
                }
            }
        }

        //get data
        $datas = $this->Dynamic_model->set_model("sentitems","ts","ID")->get_all_data(array(
            'select' => $select,
            'order_by' => array($column_sort => $sort_dir),
            'limit' => $limit,
            'start' => $start,
            'conditions' => $conditions,
            'filter' => $data_filters,
            'status' => -1,
            'debug' => false,
            "count_all_first" => true
        ));

        //get total rows
        $total_rows = $datas['total'];

        $output = array(
            "data" => $datas['datas'],
            "draw" => intval($this->input->get("draw")),
            "recordsTotal" => $total_rows,
            "recordsFiltered" => $total_rows,
        );

        //encoding and returning.
        $this->output->set_content_type('application/json');
        echo json_encode($output);
        exit;
    }

    /**
     * Function to get list_all_data admin
     */
    public function list_all_data_outbox() {
        //must ajax and must get.
        if (!$this->input->is_ajax_request() || $this->input->method(true) != "GET") {
            exit('No direct script access allowed');
        }

        //load model
        $this->load->model('Dynamic_model');

        $sort_col = sanitize_str_input($this->input->get("order")['0']['column'], "numeric");
        $sort_dir = sanitize_str_input($this->input->get("order")['0']['dir']);
        $limit    = sanitize_str_input($this->input->get("length"), "numeric");
        $start    = sanitize_str_input($this->input->get("start"), "numeric");
        $search   = sanitize_str_input($this->input->get("search")['value']);
        $filter   = $this->input->get("filter");

        $select   = array("ID","DestinationNumber","TextDecoded","Status");

        $column_sort = $select[$sort_col];

        //initialize.
        $data_filters = array();
        $conditions = array();
        $status = STATUS_ACTIVE;

        if (count ($filter) > 0) {
            foreach ($filter as $key => $value) {
                $value = ($value);
                switch ($key) {
                    case 'mobile':
                        if ($value != "") {
                            $data_filters['lower(DestinationNumber)'] = $value;
                        }
                        break;
                    default:
                        break;
                }
            }
        }

        //get data
        $datas = $this->Dynamic_model->set_model("outbox","ot","ID")->get_all_data(array(
            'select' => $select,
            'order_by' => array($column_sort => $sort_dir),
            'limit' => $limit,
            'start' => $start,
            'conditions' => $conditions,
            'filter' => $data_filters,
            'status' => -1,
            'debug' => false,
            "count_all_first" => true
        ));

        //get total rows
        $total_rows = $datas['total'];

        $output = array(
            "data" => $datas['datas'],
            "draw" => intval($this->input->get("draw")),
            "recordsTotal" => $total_rows,
            "recordsFiltered" => $total_rows,
        );

        //encoding and returning.
        $this->output->set_content_type('application/json');
        echo json_encode($output);
        exit;
    }

    /**
    * function for get template
    * @param json object
    **/
    public function get_template()
    {
        if (!$this->input->is_ajax_request() || $this->input->method(true) != "POST") {
            exit('No direct script access allowed');
        }
        //initials
        $message['is_error']  = true;
        $message['error_msg'] = "";

        // load models
        $this->load->model("Dynamic_model");

        $id = $this->input->post('id');

        //prepare get data
        $params = array(
            "select"        => "*",
            "conditions"    => array("template_id" => $id),
            "row_array"     => false,
            "status"        => -1,
            "debug"         => false
        );

        $result = $this->Dynamic_model->set_model("tbl_sms_template","tst","template_id")->get_all_data($params)['datas'];

        if( !$result )
        {
            $message['is_error']  = true;
            $message['error_msg'] = "Invalid ID";
        } else {

            $message['is_error']  = false;
            $message['error_msg'] = "";
            $message['datas']      = $result;
        }

        //encoding and returning.
        $this->output->set_content_type('application/json');
        echo json_encode($message);
        exit;
    }

    /**
    * function for get template
    * @param json object
    **/
    public function get_no_broadcast()
    {
        if (!$this->input->is_ajax_request() || $this->input->method(true) != "POST") {
            exit('No direct script access allowed');
        }
        //initials
        $message['is_error']  = true;
        $message['error_msg'] = "";

        // load models
        $this->load->model("Sms_model");

        $id = $this->input->post('id');
        $result = $this->Sms_model->get_no_broadcast($id);

        if( !$result && empty($id))
        {
            $message['is_error']  = true;
            $message['error_msg'] = "Invalid ID";
        } else {
            //convert to array 1 dimensional
            $one_dimensi = iterator_to_array(
                new RecursiveIteratorIterator(
                    new RecursiveArrayIterator($result)
                ), 0
            );
            $message['is_error']  = false;
            $message['error_msg'] = "success get data";
            $message['datas']     = $one_dimensi;
            // print_r($one_dimensi);
        }
        //encoding and returning.
        $this->output->set_content_type('application/json');
        echo json_encode($message);
        exit;
    }

    public function list_select_no()
    {
        //must ajax and must get.
        if (!$this->input->is_ajax_request() || $this->input->method(true) != "GET") {
            exit('No direct script access allowed');
        }
        $this->load->model("Dynamic_model");
        //initials filter page
        $select_q       = $this->input->get('q');
        $select_page    = ($this->input->get('page')) ? $this->input->get('page') : 1;
        //set value limit = 10;
        $limit = 10;
        $start = ($limit * ($select_page - 1));

        //initials
        $filters = array();

        //statement
        if($select_q != "") {
            $filters['UserMobilePhone'] = $select_q;
        }

        $conditions = array();

        //prepare get data
        $params = $this->Dynamic_model->set_model("mst_data_user","tnd","UserMobilePhone")->get_all_data(array(
            "select"            => "UserDataId, UserMobilePhone",
            "count_all_first"   => true,
            "filter_or"         => $filters,
            "conditions"        => $conditions,
            "limit"             => $limit,
            "start"             => $start,
            "status"            => -1
        ));

        //prepare returns.
        $message["page"]        = $select_page;
        $message["total_data"]  = $params['total'];
        $message["paging_size"] = $limit;
        $message["datas"]       = $params['datas'];

        $this->output->set_content_type('application/json');
        echo json_encode($message);
        exit;
    }

    public function _get_data()
    {
        $this->load->model("Dynamic_model");

        $params = array(
            "select"        => "UserDataId",
            "conditions"    => array("mdu.UserDataId in(".$this->id.") " => null),
            "status"        => -1,
            "debug"         => false
        );

        $data = $this->Dynamic_model->set_model("mst_data_user","mdu","UserDataId")->get_all_data($params)['datas'];
        // pr($data);exit;
        return $data;
    }
}
